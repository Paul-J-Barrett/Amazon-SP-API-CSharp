/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Input information for a given box.
    /// </summary>
    [DataContract]
    public partial class BoxInput :  IEquatable<BoxInput>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContentInformationSource
        /// </summary>
        [DataMember(Name="contentInformationSource", EmitDefaultValue=false)]
        public BoxContentInformationSource ContentInformationSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoxInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxInput" /> class.
        /// </summary>
        /// <param name="boxId">The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID         (which is generated after transportation has been confirmed) and the index of the box..</param>
        /// <param name="contentInformationSource">contentInformationSource (required).</param>
        /// <param name="contents">The Contents of the box containing a list of MSKUs and their quantity. If &#x60;boxAttribute&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;, user should provide ALL of the items that could be in the box, without specifying item quantities..</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical. (required).</param>
        /// <param name="templateName">The seller-provided name for a &#39;type&#39; of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents. (required).</param>
        /// <param name="weight">weight (required).</param>
        public BoxInput(string boxId = default(string), BoxContentInformationSource contentInformationSource = default(BoxContentInformationSource), List<BoxContent> contents = default(List<BoxContent>), Dimensions dimensions = default(Dimensions), int? quantity = default(int?), string templateName = default(string), Weight weight = default(Weight))
        {
            // to ensure "contentInformationSource" is required (not null)
            if (contentInformationSource == null)
            {
                throw new InvalidDataException("contentInformationSource is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.ContentInformationSource = contentInformationSource;
            }
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "templateName" is required (not null)
            if (templateName == null)
            {
                throw new InvalidDataException("templateName is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.TemplateName = templateName;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for BoxInput and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            this.BoxId = boxId;
            this.Contents = contents;
        }
        
        /// <summary>
        /// The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID         (which is generated after transportation has been confirmed) and the index of the box.
        /// </summary>
        /// <value>The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID         (which is generated after transportation has been confirmed) and the index of the box.</value>
        [DataMember(Name="boxId", EmitDefaultValue=false)]
        public string BoxId { get; set; }


        /// <summary>
        /// The Contents of the box containing a list of MSKUs and their quantity. If &#x60;boxAttribute&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;, user should provide ALL of the items that could be in the box, without specifying item quantities.
        /// </summary>
        /// <value>The Contents of the box containing a list of MSKUs and their quantity. If &#x60;boxAttribute&#x60; is &#x60;BARCODE_2D&#x60; or &#x60;MANUAL_PROCESS&#x60;, user should provide ALL of the items that could be in the box, without specifying item quantities.</value>
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public List<BoxContent> Contents { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The seller-provided name for a &#39;type&#39; of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents.
        /// </summary>
        /// <value>The seller-provided name for a &#39;type&#39; of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents.</value>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxInput {\n");
            sb.Append("  BoxId: ").Append(BoxId).Append("\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxInput);
        }

        /// <summary>
        /// Returns true if BoxInput instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BoxId == input.BoxId ||
                    (this.BoxId != null &&
                    this.BoxId.Equals(input.BoxId))
                ) && 
                (
                    this.ContentInformationSource == input.ContentInformationSource ||
                    (this.ContentInformationSource != null &&
                    this.ContentInformationSource.Equals(input.ContentInformationSource))
                ) && 
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoxId != null)
                    hashCode = hashCode * 59 + this.BoxId.GetHashCode();
                if (this.ContentInformationSource != null)
                    hashCode = hashCode * 59 + this.ContentInformationSource.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BoxId (string) maxLength
            if(this.BoxId != null && this.BoxId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be less than 1024.", new [] { "BoxId" });
            }

            // BoxId (string) minLength
            if(this.BoxId != null && this.BoxId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be greater than 1.", new [] { "BoxId" });
            }

            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            // TemplateName (string) maxLength
            if(this.TemplateName != null && this.TemplateName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateName, length must be less than 1024.", new [] { "TemplateName" });
            }

            // TemplateName (string) minLength
            if(this.TemplateName != null && this.TemplateName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateName, length must be greater than 1.", new [] { "TemplateName" });
            }

            yield break;
        }
    }

}
