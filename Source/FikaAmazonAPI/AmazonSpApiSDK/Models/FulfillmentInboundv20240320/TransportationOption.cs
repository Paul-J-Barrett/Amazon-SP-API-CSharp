/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information pertaining to a transportation option and the related carrier.
    /// </summary>
    [DataContract]
    public partial class TransportationOption :  IEquatable<TransportationOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransportationOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        /// <param name="appointmentSlot">appointmentSlot.</param>
        /// <param name="carrier">carrier (required).</param>
        /// <param name="inboundPlanId">Identifier to an inbound plan. (required).</param>
        /// <param name="placementOptionId">The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required).</param>
        /// <param name="quote">quote.</param>
        /// <param name="shipmentId">Identifier to a shipment. A shipment contains the boxes and units being inbounded. (required).</param>
        /// <param name="shippingMode">The shipping mode associated with the transportation option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express. (required).</param>
        /// <param name="shippingSolution">The shipping solution associated with the transportation option. Available solutions are Amazon-partnered carrier or &#39;use your own carrier&#39;. (required).</param>
        /// <param name="transportationOptionId">Identifier to a transportation option. A transportation option represent one option for how to send a shipment. (required).</param>
        public TransportationOption(AppointmentSlot appointmentSlot = default(AppointmentSlot), Carrier carrier = default(Carrier), string inboundPlanId = default(string), string placementOptionId = default(string), Quote quote = default(Quote), string shipmentId = default(string), string shippingMode = default(string), string shippingSolution = default(string), string transportationOptionId = default(string))
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            // to ensure "inboundPlanId" is required (not null)
            if (inboundPlanId == null)
            {
                throw new InvalidDataException("inboundPlanId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.InboundPlanId = inboundPlanId;
            }
            // to ensure "placementOptionId" is required (not null)
            if (placementOptionId == null)
            {
                throw new InvalidDataException("placementOptionId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.PlacementOptionId = placementOptionId;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "shippingMode" is required (not null)
            if (shippingMode == null)
            {
                throw new InvalidDataException("shippingMode is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShippingMode = shippingMode;
            }
            // to ensure "shippingSolution" is required (not null)
            if (shippingSolution == null)
            {
                throw new InvalidDataException("shippingSolution is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShippingSolution = shippingSolution;
            }
            // to ensure "transportationOptionId" is required (not null)
            if (transportationOptionId == null)
            {
                throw new InvalidDataException("transportationOptionId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.TransportationOptionId = transportationOptionId;
            }
            this.AppointmentSlot = appointmentSlot;
            this.Quote = quote;
        }
        
        /// <summary>
        /// Gets or Sets AppointmentSlot
        /// </summary>
        [DataMember(Name="appointmentSlot", EmitDefaultValue=false)]
        public AppointmentSlot AppointmentSlot { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public Carrier Carrier { get; set; }

        /// <summary>
        /// Identifier to an inbound plan.
        /// </summary>
        /// <value>Identifier to an inbound plan.</value>
        [DataMember(Name="inboundPlanId", EmitDefaultValue=false)]
        public string InboundPlanId { get; set; }

        /// <summary>
        /// The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
        /// </summary>
        /// <value>The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.</value>
        [DataMember(Name="placementOptionId", EmitDefaultValue=false)]
        public string PlacementOptionId { get; set; }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name="quote", EmitDefaultValue=false)]
        public Quote Quote { get; set; }

        /// <summary>
        /// Identifier to a shipment. A shipment contains the boxes and units being inbounded.
        /// </summary>
        /// <value>Identifier to a shipment. A shipment contains the boxes and units being inbounded.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The shipping mode associated with the transportation option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
        /// </summary>
        /// <value>The shipping mode associated with the transportation option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.</value>
        [DataMember(Name="shippingMode", EmitDefaultValue=false)]
        public string ShippingMode { get; set; }

        /// <summary>
        /// The shipping solution associated with the transportation option. Available solutions are Amazon-partnered carrier or &#39;use your own carrier&#39;.
        /// </summary>
        /// <value>The shipping solution associated with the transportation option. Available solutions are Amazon-partnered carrier or &#39;use your own carrier&#39;.</value>
        [DataMember(Name="shippingSolution", EmitDefaultValue=false)]
        public string ShippingSolution { get; set; }

        /// <summary>
        /// Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
        /// </summary>
        /// <value>Identifier to a transportation option. A transportation option represent one option for how to send a shipment.</value>
        [DataMember(Name="transportationOptionId", EmitDefaultValue=false)]
        public string TransportationOptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportationOption {\n");
            sb.Append("  AppointmentSlot: ").Append(AppointmentSlot).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  InboundPlanId: ").Append(InboundPlanId).Append("\n");
            sb.Append("  PlacementOptionId: ").Append(PlacementOptionId).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShippingMode: ").Append(ShippingMode).Append("\n");
            sb.Append("  ShippingSolution: ").Append(ShippingSolution).Append("\n");
            sb.Append("  TransportationOptionId: ").Append(TransportationOptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportationOption);
        }

        /// <summary>
        /// Returns true if TransportationOption instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportationOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportationOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppointmentSlot == input.AppointmentSlot ||
                    (this.AppointmentSlot != null &&
                    this.AppointmentSlot.Equals(input.AppointmentSlot))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.InboundPlanId == input.InboundPlanId ||
                    (this.InboundPlanId != null &&
                    this.InboundPlanId.Equals(input.InboundPlanId))
                ) && 
                (
                    this.PlacementOptionId == input.PlacementOptionId ||
                    (this.PlacementOptionId != null &&
                    this.PlacementOptionId.Equals(input.PlacementOptionId))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShippingMode == input.ShippingMode ||
                    (this.ShippingMode != null &&
                    this.ShippingMode.Equals(input.ShippingMode))
                ) && 
                (
                    this.ShippingSolution == input.ShippingSolution ||
                    (this.ShippingSolution != null &&
                    this.ShippingSolution.Equals(input.ShippingSolution))
                ) && 
                (
                    this.TransportationOptionId == input.TransportationOptionId ||
                    (this.TransportationOptionId != null &&
                    this.TransportationOptionId.Equals(input.TransportationOptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentSlot != null)
                    hashCode = hashCode * 59 + this.AppointmentSlot.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.InboundPlanId != null)
                    hashCode = hashCode * 59 + this.InboundPlanId.GetHashCode();
                if (this.PlacementOptionId != null)
                    hashCode = hashCode * 59 + this.PlacementOptionId.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShippingMode != null)
                    hashCode = hashCode * 59 + this.ShippingMode.GetHashCode();
                if (this.ShippingSolution != null)
                    hashCode = hashCode * 59 + this.ShippingSolution.GetHashCode();
                if (this.TransportationOptionId != null)
                    hashCode = hashCode * 59 + this.TransportationOptionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InboundPlanId (string) maxLength
            if(this.InboundPlanId != null && this.InboundPlanId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InboundPlanId, length must be less than 38.", new [] { "InboundPlanId" });
            }

            // InboundPlanId (string) minLength
            if(this.InboundPlanId != null && this.InboundPlanId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InboundPlanId, length must be greater than 38.", new [] { "InboundPlanId" });
            }

            // InboundPlanId (string) pattern
            Regex regexInboundPlanId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexInboundPlanId.Match(this.InboundPlanId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InboundPlanId, must match a pattern of " + regexInboundPlanId, new [] { "InboundPlanId" });
            }

            // PlacementOptionId (string) maxLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be less than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) minLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be greater than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) pattern
            Regex regexPlacementOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPlacementOptionId.Match(this.PlacementOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, must match a pattern of " + regexPlacementOptionId, new [] { "PlacementOptionId" });
            }

            // ShipmentId (string) maxLength
            if(this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) pattern
            Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexShipmentId.Match(this.ShipmentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
            }

            // ShippingMode (string) maxLength
            if(this.ShippingMode != null && this.ShippingMode.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMode, length must be less than 1024.", new [] { "ShippingMode" });
            }

            // ShippingMode (string) minLength
            if(this.ShippingMode != null && this.ShippingMode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingMode, length must be greater than 1.", new [] { "ShippingMode" });
            }

            // ShippingSolution (string) maxLength
            if(this.ShippingSolution != null && this.ShippingSolution.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingSolution, length must be less than 1024.", new [] { "ShippingSolution" });
            }

            // ShippingSolution (string) minLength
            if(this.ShippingSolution != null && this.ShippingSolution.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingSolution, length must be greater than 1.", new [] { "ShippingSolution" });
            }

            // TransportationOptionId (string) maxLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be less than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) minLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be greater than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) pattern
            Regex regexTransportationOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexTransportationOptionId.Match(this.TransportationOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, must match a pattern of " + regexTransportationOptionId, new [] { "TransportationOptionId" });
            }

            yield break;
        }
    }

}
